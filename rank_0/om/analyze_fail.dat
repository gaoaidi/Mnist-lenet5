# [No.1] construct_wrapper.13
# In file main.py(49)/    def construct(self, x):/
funcgraph fg_13(
        %para1 : Tensor(F32)[5, 1, 28, 28]    # x
        , %para2 : Ref[Tensor(F32)][10]    # fc3.bias
        , %para3 : Ref[Tensor(F32)][10, 84]    # fc3.weight
        , %para4 : Ref[Tensor(F32)][16, 6, 5, 5]    # conv2.weight
        , %para5 : Ref[Tensor(F32)][84]    # fc2.bias
        , %para6 : Ref[Tensor(F32)][84, 120]    # fc2.weight
        , %para7 : Ref[Tensor(F32)][120]    # fc1.bias
        , %para8 : Ref[Tensor(F32)][120, 400]    # fc1.weight
        , %para9 : Ref[Tensor(F32)][6, 1, 5, 5]    # conv1.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_14(%para1)    #(Tensor(F32)[5, 1, 28, 28])    # fg_14=construct.14 #scope: Default
      # In file main.py(59)/        return x/#[CNode]20
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file main.py(59)/        return x/#[CNode]21
}
# order:
#   1: construct_wrapper.13:[CNode]20{[0]: ValueNode<FuncGraph> construct.14, [1]: x}
#   2: construct_wrapper.13:[CNode]21{[0]: ValueNode<Primitive> Return, [1]: [CNode]20}


# [No.2] construct.14
# In file main.py(49)/    def construct(self, x):/
funcgraph fg_14[fg_13](
        %para10 : Tensor(F32)[5, 1, 28, 28]    # x
    ) {
    %1 : Tensor(F32)[5, 6, 24, 24] = FuncGraph::fg_22(%para10)    #(Tensor(F32)[5, 1, 28, 28])    # fg_22=construct.22 #scope: Default
      # In file main.py(50)/        x = self.relu(self.conv1(x))/#[CNode]23
    %2 : Tensor(F32)[5, 6, 24, 24] = FuncGraph::fg_24(%1)    #(Tensor(F32)[5, 6, 24, 24])    # fg_24=construct.24 #scope: Default
      # In file main.py(50)/        x = self.relu(self.conv1(x))/#x
    %3 : Tensor(F32)[5, 6, 12, 12] = FuncGraph::fg_25(%2)    #(Tensor(F32)[5, 6, 24, 24])    # fg_25=construct.25 #scope: Default
      # In file main.py(51)/        x = self.pool(x)/#x
    %4 : Tensor(F32)[5, 16, 8, 8] = FuncGraph::fg_26(%3)    #(Tensor(F32)[5, 6, 12, 12])    # fg_26=construct.26 #scope: Default
      # In file main.py(52)/        x = self.relu(self.conv2(x))/#[CNode]27
    %5 : Tensor(F32)[5, 16, 8, 8] = FuncGraph::fg_24(%4)    #(Tensor(F32)[5, 16, 8, 8])    # fg_24=construct.24 #scope: Default
      # In file main.py(52)/        x = self.relu(self.conv2(x))/#x
    %6 : Tensor(F32)[5, 16, 4, 4] = FuncGraph::fg_25(%5)    #(Tensor(F32)[5, 16, 8, 8])    # fg_25=construct.25 #scope: Default
      # In file main.py(53)/        x = self.pool(x)/#x
    %7 : Tensor(F32)[5, 256] = FuncGraph::fg_28(%6)    #(Tensor(F32)[5, 16, 4, 4])    # fg_28=construct.28 #scope: Default
      # In file main.py(54)/        x = self.flatten(x)/#x

#------------------------> 1
    %8 = FuncGraph::fg_15(%7)    #(Tensor(F32)[5, 256])    # fg_15=construct.15 #scope: Default
      # In file main.py(55)/        x = self.fc1(x)/#x
    %9 = FuncGraph::fg_29(%8)    #(Undefined)    # fg_29=construct.29 #scope: Default
      # In file main.py(56)/        x = self.fc2(x)/#x
    %10 = FuncGraph::fg_30(%9)    #(Undefined)    # fg_30=construct.30 #scope: Default
      # In file main.py(57)/        x = self.fc3(x)/#x
    Primitive::Return{prim_type=1}(%10)    #(Undefined) #scope: Default
      # In file main.py(59)/        return x/#[CNode]31
}
# order:
#   1: construct.14:[CNode]23{[0]: ValueNode<FuncGraph> construct.22, [1]: x}
#   2: construct.14:x{[0]: ValueNode<FuncGraph> construct.24, [1]: [CNode]23}
#   3: construct.14:x{[0]: ValueNode<FuncGraph> construct.25, [1]: x}
#   4: construct.14:[CNode]27{[0]: ValueNode<FuncGraph> construct.26, [1]: x}
#   5: construct.14:x{[0]: ValueNode<FuncGraph> construct.24, [1]: [CNode]27}
#   6: construct.14:x{[0]: ValueNode<FuncGraph> construct.25, [1]: x}
#   7: construct.14:x{[0]: ValueNode<FuncGraph> construct.28, [1]: x}
#   8: construct.14:x{[0]: ValueNode<FuncGraph> construct.15, [1]: x}
#   9: construct.14:x{[0]: ValueNode<FuncGraph> construct.29, [1]: x}
#  10: construct.14:x{[0]: ValueNode<FuncGraph> construct.30, [1]: x}
#  11: construct.14:[CNode]31{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.3] construct.15
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/
funcgraph fg_15[fg_13](
        %para11 : Tensor(F32)[5, 256]    # x
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_16(%para11, %para7, %para8)    #(Tensor(F32)[5, 256], Ref[Tensor(F32)][120], Ref[Tensor(F32)][120, 400])    # fg_16=L-construct.16 #scope: Default
      # #[CNode]32
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc1-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/#[CNode]33
}
# order:
#   1: construct.15:[CNode]32{[0]: ValueNode<FuncGraph> L-construct.16, [1]: x, [2]: fc1.bias, [3]: fc1.weight}
#   2: construct.15:[CNode]33{[0]: ValueNode<Primitive> Return, [1]: [CNode]32}


# [No.4] L-construct.16
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/
funcgraph fg_16(
        %para12 : Tensor(F32)[5, 256]    # x
        , %para13 : Ref[Tensor(F32)][120]    # L-fc3.bias
        , %para14 : Ref[Tensor(F32)][120, 400]    # L-fc3.weight
    ) {
    %1 : Tuple[I64*2] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para12)    #(Tensor(F32)[5, 256]) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(329)/        if len(x_shape) != 2:/#Φx_shape
    %2 : NoneType = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1, "Dense")    #(Tuple[I64*2], String) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(321)/        check_dense_input_shape(x_shape, self.cls_name)/#34
    %3 : NoneType = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/#35
    %4 : I64 = FuncGraph::fg_36(%1)    #(Tuple[I64*2])    # fg_36=L-ms_len.36 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#37
    %5 : Bool = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64, I64) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#38
    %6 : Bool = FuncGraph::fg_39(%5)    #(Bool)    # fg_39=L-bool_.39 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#38
    %7 : Func = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_40, FuncGraph::fg_17)    #(Bool, Func, Func)    # fg_40=L-✓construct.40, fg_17=L-✗construct.17 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#41

#------------------------> 3
    %8 = %7() #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#42
    %9 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%8, %3)    #(Undefined, NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/#43
    Primitive::Return{prim_type=1}(%9)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(319)/    def construct(self, x):/#[CNode]44
}
# order:
#   1: L-construct.16:Φx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: L-construct.16:34{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: Φx_shape, [2]: ValueNode<StringImm> Dense}
#   3: L-construct.16:37{[0]: ValueNode<FuncGraph> L-ms_len.36, [1]: Φx_shape}
#   4: L-construct.16:38{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 37, [2]: ValueNode<Int64Imm> 2}
#   5: L-construct.16:38{[0]: ValueNode<FuncGraph> L-bool_.39, [1]: 38}
#   6: L-construct.16:41{[0]: ValueNode<Primitive> Switch, [1]: 38, [2]: ValueNode<FuncGraph> L-✓construct.40, [3]: ValueNode<FuncGraph> L-✗construct.17}
#   7: L-construct.16:42{[0]: 41}
#   8: L-construct.16:[CNode]44{[0]: ValueNode<Primitive> Return, [1]: 43}


# [No.5] L-✗construct.17
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/
funcgraph fg_17[fg_16](
) {

#------------------------> 4
    %1 = FuncGraph::fg_18(%para12)    #(Tensor(F32)[5, 256])    # fg_18=L-↓construct.18 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#45
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#46
}
# order:
#   1: L-✗construct.17:45{[0]: ValueNode<FuncGraph> L-↓construct.18, [1]: x}
#   2: L-✗construct.17:46{[0]: ValueNode<Primitive> Return, [1]: 45}


# [No.6] L-↓construct.18
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/
funcgraph fg_18[fg_16](
        %para15 : Tensor(F32)[5, 256]    # Φx
    ) {
    %1 : Bool = FuncGraph::fg_39(Bool(1))    #(Bool)    # fg_39=L-bool_.39 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#47
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_19, FuncGraph::fg_48)    #(Bool, Func, Func)    # fg_19=L-✓↓construct.19, fg_48=L-✗↓construct.48 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#49

#------------------------> 5
    %3 = %2() #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#50
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#51
}
# order:
#   1: L-↓construct.18:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: Φx, [2]: L-fc3.weight}
#   2: L-↓construct.18:47{[0]: ValueNode<FuncGraph> L-bool_.39, [1]: ValueNode<BoolImm> true}
#   3: L-↓construct.18:49{[0]: ValueNode<Primitive> Switch, [1]: 47, [2]: ValueNode<FuncGraph> L-✓↓construct.19, [3]: ValueNode<FuncGraph> L-✗↓construct.48}
#   4: L-↓construct.18:50{[0]: 49}
#   5: L-↓construct.18:51{[0]: ValueNode<Primitive> Return, [1]: 50}


# [No.7] L-✓↓construct.19
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/
funcgraph fg_19[fg_18](
) {

#------------------------> 6
    %1 = $(L-↓construct.18):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[transpose_b=Bool(1), transpose_a=Bool(0), output_names=["output"], input_names=["x1", "x2"]](%para15, %para14)    #(Tensor(F32)[5, 256], Ref[Tensor(F32)][120, 400]) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(324)/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[input_names=["x", "b"], output_names=["output"], format="NCHW"](%1, %para13)    #(Undefined, Ref[Tensor(F32)][120]) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(326)/            x = self.bias_add(x, self.bias)/#x
    %3 = FuncGraph::fg_52(%2)    #(Undefined)    # fg_52=L-↓↓construct.52 #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#53
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(325)/        if self.has_bias:/#54
}
# order:
#   1: L-✓↓construct.19:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-fc3.bias}
#   2: L-✓↓construct.19:53{[0]: ValueNode<FuncGraph> L-↓↓construct.52, [1]: x}
#   3: L-✓↓construct.19:54{[0]: ValueNode<Primitive> Return, [1]: 53}


#===============================================================================
# num of function graphs in stack: 7/8 (Ignored 1 internal frames).
